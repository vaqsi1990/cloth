generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELED
  REFUNDED
}

enum Gender {
  MEN
  WOMEN
  CHILDREN
  UNISEX
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  products  Product[]
}

model Product {
  id            Int              @id @default(autoincrement())
  name          String
  slug          String           @unique
  description   String?
  currentPrice  Float
  originalPrice Float?
  sku           String?          @unique
  gender        Gender           @default(UNISEX)
  isNew         Boolean          @default(false)
  hasSale       Boolean          @default(false)
  rating        Float?           @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  categoryId    Int?
  category      Category?        @relation(fields: [categoryId], references: [id])

  images        ProductImage[]
  variants      ProductVariant[]
  orderItems    OrderItem[]      // history relation (for denormalized order items)
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  url       String
  alt       String?
  position  Int     @default(0)
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  size      String
  stock     Int     @default(0)
  sku       String? 
  price     Float?  // optional override price for this variant
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, size])
}

model Order {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  status        OrderStatus @default(PENDING)
  total         Float
  // Guest customer fields (შეგიძლია ღილაკებით ან ანგარიშის გარეშე შეკვეთა)
  customerName  String
  phone         String
  email         String?
  address       String
  city          String?
  postalCode    String?
  country       String? 
  note          String?

  // optional for payment
  paymentMethod String?
  paymentId     String?

  items         OrderItem[]
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  order       Order   @relation(fields: [orderId], references: [id])
  orderId     Int

  // Denormalized snapshot of product at time of order
  productId   Int?
  product     Product? @relation(fields: [productId], references: [id])
  productName String
  image       String?
  size        String?
  price       Float
  quantity    Int
}
