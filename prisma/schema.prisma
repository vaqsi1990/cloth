generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELED
  REFUNDED
}

enum Gender {
  MEN
  WOMEN
  CHILDREN
  UNISEX
}

enum UserRole {
  USER
  ADMIN
}

enum TransactionType {
  SALE
  RENT
}

enum RentalStatus {
  RESERVED
  ACTIVE
  RETURNED
  LATE
  CANCELED
}

enum ProductStatus {
  AVAILABLE      // თავისუფალია
  RENTED         // გაქირავებულია 
  RESERVED       // დაჯავშნილია
  MAINTENANCE    // საგამშრალებლად ან რესტავრაციაზეა
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  phone         String? @unique // ტელეფონის ნომერი
  location      String? // ადგილმდებარეობა
  personalId    String? @unique // პირადობის ნომერი
  password      String? 
  role          UserRole  @default(USER)
  emailVerified DateTime?
  image         String?
  // Ban fields
  banned        Boolean   @default(false)
  banReason     String?
  bannedAt      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
 
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  orders        Order[]
  rentals       Rental[]
  transactions  Transaction[]
  
  // Chat relations
  chatRooms     ChatRoom[]
  adminChats    ChatRoom[] @relation("AdminChats")
  chatMessages  ChatMessage[]
  adminMessages ChatMessage[] @relation("AdminMessages")

  // Verification (one-to-one)
  verification  UserVerification?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  products  Product[]
}

model Product {
  id            Int              @id @default(autoincrement())
  name          String
  slug          String           @unique
  description   String?
  sku           String?          @unique
  gender        Gender           @default(UNISEX)
  color         String?
  location      String?
  isNew         Boolean          @default(false)
  hasSale       Boolean          @default(false)
  rating        Float?           @default(0)
  isRentable    Boolean          @default(false)
  pricePerDay   Float?
  maxRentalDays Int?
  deposit       Float?
  status        ProductStatus    @default(AVAILABLE)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  categoryId    Int?
  category      Category?        @relation(fields: [categoryId], references: [id])
  
  userId        String?
  user          User?            @relation(fields: [userId], references: [id])

  images        ProductImage[]
  variants      ProductVariant[]
  orderItems    OrderItem[]      // history relation (for denormalized order items)
  rentals       Rental[]
  cartItems     CartItem[]
  rentalPriceTiers RentalPriceTier[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  url       String
  alt       String?
  position  Int     @default(0)
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  size      String
  stock     Int     @default(0)
  sku       String? 
  price     Float   // required price for this variant
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rentals   Rental[]

  @@unique([productId, size])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    String?  // Optional for guest users
  sessionId String?  // For guest users
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  items CartItem[]
  
  @@unique([userId])
  @@unique([sessionId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  
  // Product information
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])
  productName String
  image     String?
  size      String?
  price     Float
  quantity  Int
  
  // Rental fields
  isRental        Boolean?
  rentalStartDate DateTime?
  rentalEndDate   DateTime?
  rentalDays      Int?
  deposit         Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([cartId, productId, size, isRental, rentalStartDate, rentalEndDate])
}

model Order {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  status        OrderStatus @default(PENDING)
  total         Float
  // Guest customer fields (შეგიძლია ღილაკებით ან ანგარიშის გარეშე შეკვეთა)
  customerName  String
  phone         String
  email         String?
  address       String
  city          String?
  postalCode    String?
  country       String? 
  note          String?

  // optional for payment
  paymentMethod String?
  paymentId     String?

  // User relation (optional for guest orders)
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])

  items         OrderItem[]
  transactions  Transaction[]
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     Int

  // Denormalized snapshot of product at time of order
  productId   Int?
  product     Product? @relation(fields: [productId], references: [id])
  productName String
  image       String?
  size        String?
  price       Float
  quantity    Int
  
  // Rental fields
  isRental        Boolean?
  rentalStartDate DateTime?
  rentalEndDate   DateTime?
  rentalDays      Int?
  deposit         Float?
}

model Transaction {
  id             Int              @id @default(autoincrement())
  type           TransactionType  @default(SALE) // SALE ან RENT
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  total          Float

  userId         String?
  user           User?            @relation(fields: [userId], references: [id])

  orderId        Int?             // თუ გაყიდვაა, უკავშირდება Order-ს
  order          Order?           @relation(fields: [orderId], references: [id])

  rentalId       Int?             // თუ გაქირავებაა, უკავშირდება Rental-ს
  rental         Rental?          @relation(fields: [rentalId], references: [id])
}

model Rental {
  id             Int            @id @default(autoincrement())
  productId      Int
  product        Product        @relation(fields: [productId], references: [id])

  variantId      Int?
  variant        ProductVariant? @relation(fields: [variantId], references: [id])

  userId         String?
  user           User?          @relation(fields: [userId], references: [id])

  startDate      DateTime
  endDate        DateTime
  pricePerDay    Float
  totalPrice     Float
  status         RentalStatus   @default(RESERVED)

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  transactions   Transaction[]
}

enum ChatStatus {
  ACTIVE
  CLOSED
  PENDING
}

model ChatRoom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    ChatStatus @default(PENDING)
  
  // User who started the chat (can be null for guest users)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  
  // Guest user info (for non-registered users)
  guestName String?
  guestEmail String?
  
  // Admin who is handling the chat
  adminId   String?
  admin     User?    @relation("AdminChats", fields: [adminId], references: [id])
  
  messages  ChatMessage[]
  
  @@index([status])
  @@index([userId])
  @@index([adminId])
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String
  isFromAdmin Boolean @default(false)
  
  // Chat room this message belongs to
  chatRoomId Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  
  // User who sent the message (can be null for admin messages)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  
  // Admin who sent the message (for admin messages)
  adminId   String?
  admin     User?    @relation("AdminMessages", fields: [adminId], references: [id])
  
  @@index([chatRoomId])
  @@index([createdAt])
}

model RentalPriceTier {
  id          Int      @id @default(autoincrement())
  productId   Int
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  minDays     Int      // მაგ. 4, 7, 28
  pricePerDay Float    // მაგ. 20, 12, 8
  createdAt   DateTime @default(now())
  
  @@index([productId])
}

model UserVerification {
  id         Int                @id @default(autoincrement())
  userId     String             @unique
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  idFrontUrl String?
  idBackUrl  String?
  status     VerificationStatus @default(PENDING)
  comment    String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}