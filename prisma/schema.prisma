generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELED
  REFUNDED
}

enum Gender {
  MEN
  WOMEN
  CHILDREN
  UNISEX
}

enum UserRole {
  USER
  ADMIN
}

enum TransactionType {
  SALE
  RENT
}

enum RentalStatus {
  RESERVED
  ACTIVE
  RETURNED
  LATE
  CANCELED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          UserRole  @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  products      Product[]
  orders        Order[]
  rentals       Rental[]
  transactions  Transaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  products  Product[]
}

model Product {
  id            Int              @id @default(autoincrement())
  name          String
  slug          String           @unique
  description   String?
  sku           String?          @unique
  gender        Gender           @default(UNISEX)
  isNew         Boolean          @default(false)
  hasSale       Boolean          @default(false)
  rating        Float?           @default(0)
  isRentable    Boolean          @default(false)
  pricePerDay   Float?
  maxRentalDays Int?
  deposit       Float?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  categoryId    Int?
  category      Category?        @relation(fields: [categoryId], references: [id])
  
  userId        String?
  user          User?            @relation(fields: [userId], references: [id])

  images        ProductImage[]
  variants      ProductVariant[]
  orderItems    OrderItem[]      // history relation (for denormalized order items)
  rentals       Rental[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  url       String
  alt       String?
  position  Int     @default(0)
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  size      String
  stock     Int     @default(0)
  sku       String? 
  price     Float   // required price for this variant
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rentals   Rental[]

  @@unique([productId, size])
}

model Order {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  status        OrderStatus @default(PENDING)
  total         Float
  // Guest customer fields (შეგიძლია ღილაკებით ან ანგარიშის გარეშე შეკვეთა)
  customerName  String
  phone         String
  email         String?
  address       String
  city          String?
  postalCode    String?
  country       String? 
  note          String?

  // optional for payment
  paymentMethod String?
  paymentId     String?

  // User relation (optional for guest orders)
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])

  items         OrderItem[]
  transactions  Transaction[]
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  order       Order   @relation(fields: [orderId], references: [id])
  orderId     Int

  // Denormalized snapshot of product at time of order
  productId   Int?
  product     Product? @relation(fields: [productId], references: [id])
  productName String
  image       String?
  size        String?
  price       Float
  quantity    Int
}

model Transaction {
  id             Int              @id @default(autoincrement())
  type           TransactionType  @default(SALE) // SALE ან RENT
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  total          Float

  userId         String?
  user           User?            @relation(fields: [userId], references: [id])

  orderId        Int?             // თუ გაყიდვაა, უკავშირდება Order-ს
  order          Order?           @relation(fields: [orderId], references: [id])

  rentalId       Int?             // თუ გაქირავებაა, უკავშირდება Rental-ს
  rental         Rental?          @relation(fields: [rentalId], references: [id])
}

model Rental {
  id             Int            @id @default(autoincrement())
  productId      Int
  product        Product        @relation(fields: [productId], references: [id])

  variantId      Int?
  variant        ProductVariant? @relation(fields: [variantId], references: [id])

  userId         String?
  user           User?          @relation(fields: [userId], references: [id])

  startDate      DateTime
  endDate        DateTime
  pricePerDay    Float
  totalPrice     Float
  status         RentalStatus   @default(RESERVED)

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  transactions   Transaction[]
}
